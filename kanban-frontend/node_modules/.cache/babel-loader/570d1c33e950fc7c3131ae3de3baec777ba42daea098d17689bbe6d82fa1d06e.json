{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.find.js\";\nimport axios from 'axios';\nexport default {\n  name: 'KanbanBoard',\n  data() {\n    return {\n      board: null,\n      cardFormColumnId: null,\n      newCard: {\n        title: '',\n        description: ''\n      }\n    };\n  },\n  methods: {\n    async createBoard() {\n      try {\n        const boardRes = await axios.post('http://localhost:8000/api/board/', {\n          name: 'Meu Novo Quadro'\n        });\n        const boardId = boardRes.data.id;\n        const columnNames = ['A Fazer', 'Fazendo', 'Feito'];\n        await Promise.all(columnNames.map((name, index) => axios.post('http://localhost:8000/api/column/', {\n          name,\n          order: index,\n          board: boardId\n        })));\n        const updatedBoard = await axios.get(`http://localhost:8000/api/board/${boardId}/`);\n        this.board = updatedBoard.data;\n      } catch (error) {\n        console.error('Erro ao criar o board:', error);\n      }\n    },\n    showCardForm(columnId) {\n      this.cardFormColumnId = columnId;\n      this.newCard.title = '';\n      this.newCard.description = '';\n    },\n    cancelCard() {\n      this.cardFormColumnId = null;\n      this.newCard.title = '';\n      this.newCard.description = '';\n    },\n    isFormVisible(columnId) {\n      return this.cardFormColumnId === columnId;\n    },\n    async submitCard(columnId) {\n      if (!this.newCard.title.trim()) {\n        return;\n      }\n      try {\n        await axios.post('http://localhost:8000/api/card/', {\n          title: this.newCard.title.trim(),\n          description: this.newCard.description.trim(),\n          order: 0,\n          column: columnId\n        });\n        const updatedBoard = await axios.get(`http://localhost:8000/api/board/${this.board.id}/`);\n        this.board = updatedBoard.data;\n        this.cancelCard();\n      } catch (error) {\n        console.error('Erro ao criar card:', error);\n      }\n    },\n    getColumnColor(columnId) {\n      const colors = ['#03A9F4' // Azul\n      ];\n      return colors[columnId % colors.length];\n    }\n  },\n  name: 'KanbanApp',\n  components: {\n    KanbanBoard\n  },\n  data() {\n    return {\n      authTab: 'login',\n      isAuthenticated: false,\n      token: null,\n      user: null,\n      board: null,\n      loading: false,\n      authError: null,\n      registerSuccess: false,\n      loginForm: {\n        username: '',\n        password: ''\n      },\n      registerForm: {\n        username: '',\n        password: ''\n      },\n      // Variáveis para cards e colunas (herdadas do seu componente original)\n      newCard: {\n        title: '',\n        description: ''\n      },\n      visibleCardFormColumnId: null\n    };\n  },\n  created() {\n    this.token = localStorage.getItem('token');\n    if (this.token) {\n      this.isAuthenticated = true;\n      this.loadBoard();\n    }\n  },\n  methods: {\n    async login() {\n      this.loading = true;\n      this.authError = null;\n      this.registerSuccess = false;\n      try {\n        const res = await fetch('/api/login/', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(this.loginForm)\n        });\n        const data = await res.json();\n        if (!res.ok) {\n          this.authError = data.non_field_errors ? data.non_field_errors.join(', ') : data.detail || 'Erro ao fazer login';\n          this.loading = false;\n          return;\n        }\n        this.token = data.token;\n        this.user = {\n          id: data.user_id,\n          username: data.username\n        };\n        localStorage.setItem('token', this.token);\n        this.isAuthenticated = true;\n        this.loading = false;\n        this.authTab = 'login';\n        this.loginForm.username = '';\n        this.loginForm.password = '';\n        this.loadBoard();\n      } catch (error) {\n        this.authError = 'Erro na comunicação com o servidor';\n        this.loading = false;\n      }\n    },\n    async register() {\n      this.loading = true;\n      this.authError = null;\n      this.registerSuccess = false;\n      try {\n        const res = await fetch('/api/register/', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(this.registerForm)\n        });\n        const data = await res.json();\n        if (!res.ok) {\n          // Pode ter erros de validação no objeto data\n          if (typeof data === 'object') {\n            this.authError = Object.values(data).flat().join(', ');\n          } else {\n            this.authError = 'Erro ao registrar usuário';\n          }\n          this.loading = false;\n          return;\n        }\n        this.registerSuccess = true;\n        this.loading = false;\n        // Limpar formulário para evitar confusão\n        this.registerForm.username = '';\n        this.registerForm.password = '';\n        // Trocar para aba login para que usuário faça login\n        this.authTab = 'login';\n      } catch (error) {\n        this.authError = 'Erro na comunicação com o servidor';\n        this.loading = false;\n      }\n    },\n    logout() {\n      this.isAuthenticated = false;\n      this.token = null;\n      this.user = null;\n      this.board = null;\n      localStorage.removeItem('token');\n    },\n    async loadBoard() {\n      if (!this.token) return;\n      try {\n        const res = await fetch('/api/board/', {\n          headers: {\n            Authorization: `Token ${this.token}`\n          }\n        });\n        if (res.status === 401) {\n          // Token inválido ou expirado\n          this.logout();\n          return;\n        }\n        if (!res.ok) throw new Error('Erro ao carregar board');\n        this.board = await res.json();\n      } catch {\n        this.board = null;\n      }\n    },\n    async createBoard() {\n      if (!this.token) return;\n      try {\n        const res = await fetch('/api/board/', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: `Token ${this.token}`\n          },\n          body: JSON.stringify({\n            name: 'Meu Board'\n          })\n        });\n        if (!res.ok) throw new Error('Erro ao criar board');\n        this.board = await res.json();\n      } catch (error) {\n        alert('Falha ao criar board.');\n      }\n    },\n    getColumnColor(columnId) {\n      const colors = ['#21BA45', '#2185D0', '#6435C9', '#F2711C'];\n      return colors[columnId % colors.length];\n    },\n    isFormVisible(columnId) {\n      return this.visibleCardFormColumnId === columnId;\n    },\n    showCardForm(columnId) {\n      this.visibleCardFormColumnId = columnId;\n      this.newCard.title = '';\n      this.newCard.description = '';\n    },\n    cancelCard() {\n      this.visibleCardFormColumnId = null;\n      this.newCard.title = '';\n      this.newCard.description = '';\n    },\n    async submitCard(columnId) {\n      if (!this.token) return;\n      if (!this.newCard.title.trim()) return;\n      try {\n        const res = await fetch(`/api/board/columns/${columnId}/cards/`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: `Token ${this.token}`\n          },\n          body: JSON.stringify(this.newCard)\n        });\n        if (!res.ok) throw new Error('Erro ao criar card');\n        const card = await res.json();\n        // Atualiza localmente o board (simplificado)\n        const column = this.board.columns.find(c => c.id === columnId);\n        if (column) column.cards.push(card);\n        this.cancelCard();\n      } catch {\n        alert('Falha ao adicionar card.');\n      }\n    }\n  }\n};","map":{"version":3,"names":["axios","name","data","board","cardFormColumnId","newCard","title","description","methods","createBoard","boardRes","post","boardId","id","columnNames","Promise","all","map","index","order","updatedBoard","get","error","console","showCardForm","columnId","cancelCard","isFormVisible","submitCard","trim","column","getColumnColor","colors","length","components","KanbanBoard","authTab","isAuthenticated","token","user","loading","authError","registerSuccess","loginForm","username","password","registerForm","visibleCardFormColumnId","created","localStorage","getItem","loadBoard","login","res","fetch","method","headers","body","JSON","stringify","json","ok","non_field_errors","join","detail","user_id","setItem","register","Object","values","flat","logout","removeItem","Authorization","status","Error","alert","card","columns","find","c","cards","push"],"sources":["C:/Users/faculdade/Desktop/Kanban/Kanban/kanban-frontend/src/KanbanBoard.js"],"sourcesContent":["import axios from 'axios'\r\n\r\nexport default {\r\n  name: 'KanbanBoard',\r\n  data() {\r\n    return {\r\n      board: null,\r\n      cardFormColumnId: null,\r\n      newCard: {\r\n        title: '',\r\n        description: '',\r\n      },\r\n    }\r\n  },\r\n  methods: {\r\n    async createBoard() {\r\n      try {\r\n        const boardRes = await axios.post('http://localhost:8000/api/board/', {\r\n          name: 'Meu Novo Quadro',\r\n        })\r\n        const boardId = boardRes.data.id\r\n\r\n        const columnNames = ['A Fazer', 'Fazendo', 'Feito']\r\n        await Promise.all(\r\n          columnNames.map((name, index) =>\r\n            axios.post('http://localhost:8000/api/column/', {\r\n              name,\r\n              order: index,\r\n              board: boardId,\r\n            })\r\n          )\r\n        )\r\n\r\n        const updatedBoard = await axios.get(\r\n          `http://localhost:8000/api/board/${boardId}/`\r\n        )\r\n        this.board = updatedBoard.data\r\n      } catch (error) {\r\n        console.error('Erro ao criar o board:', error)\r\n      }\r\n    },\r\n    showCardForm(columnId) {\r\n      this.cardFormColumnId = columnId\r\n      this.newCard.title = ''\r\n      this.newCard.description = ''\r\n    },\r\n    cancelCard() {\r\n      this.cardFormColumnId = null\r\n      this.newCard.title = ''\r\n      this.newCard.description = ''\r\n    },\r\n    isFormVisible(columnId) {\r\n      return this.cardFormColumnId === columnId\r\n    },\r\n    async submitCard(columnId) {\r\n      if (!this.newCard.title.trim()) {\r\n        return\r\n      }\r\n      try {\r\n        await axios.post('http://localhost:8000/api/card/', {\r\n          title: this.newCard.title.trim(),\r\n          description: this.newCard.description.trim(),\r\n          order: 0,\r\n          column: columnId,\r\n        })\r\n        const updatedBoard = await axios.get(\r\n          `http://localhost:8000/api/board/${this.board.id}/`\r\n        )\r\n        this.board = updatedBoard.data\r\n        this.cancelCard()\r\n      } catch (error) {\r\n        console.error('Erro ao criar card:', error)\r\n      }\r\n    },\r\n    getColumnColor(columnId) {\r\n      const colors = [\r\n        '#03A9F4', // Azul\r\n      ];\r\n      return colors[columnId % colors.length];\r\n    },\r\n  },\r\n\r\n  name: 'KanbanApp',\r\n  components: { KanbanBoard },\r\n  data() {\r\n    return {\r\n      authTab: 'login',\r\n      isAuthenticated: false,\r\n      token: null,\r\n      user: null,\r\n      board: null,\r\n      loading: false,\r\n      authError: null,\r\n      registerSuccess: false,\r\n      loginForm: {\r\n        username: '',\r\n        password: '',\r\n      },\r\n      registerForm: {\r\n        username: '',\r\n        password: '',\r\n      },\r\n      // Variáveis para cards e colunas (herdadas do seu componente original)\r\n      newCard: {\r\n        title: '',\r\n        description: ''\r\n      },\r\n      visibleCardFormColumnId: null,\r\n    }\r\n  },\r\n  created() {\r\n    this.token = localStorage.getItem('token')\r\n    if (this.token) {\r\n      this.isAuthenticated = true\r\n      this.loadBoard()\r\n    }\r\n  },\r\n  methods: {\r\n    async login() {\r\n      this.loading = true\r\n      this.authError = null\r\n      this.registerSuccess = false\r\n      try {\r\n        const res = await fetch('/api/login/', {\r\n          method: 'POST',\r\n          headers: { 'Content-Type': 'application/json' },\r\n          body: JSON.stringify(this.loginForm),\r\n        })\r\n        const data = await res.json()\r\n        if (!res.ok) {\r\n          this.authError = data.non_field_errors ? data.non_field_errors.join(', ') : (data.detail || 'Erro ao fazer login')\r\n          this.loading = false\r\n          return\r\n        }\r\n        this.token = data.token\r\n        this.user = { id: data.user_id, username: data.username }\r\n        localStorage.setItem('token', this.token)\r\n        this.isAuthenticated = true\r\n        this.loading = false\r\n        this.authTab = 'login'\r\n        this.loginForm.username = ''\r\n        this.loginForm.password = ''\r\n        this.loadBoard()\r\n      } catch (error) {\r\n        this.authError = 'Erro na comunicação com o servidor'\r\n        this.loading = false\r\n      }\r\n    },\r\n    async register() {\r\n      this.loading = true\r\n      this.authError = null\r\n      this.registerSuccess = false\r\n      try {\r\n        const res = await fetch('/api/register/', {\r\n          method: 'POST',\r\n          headers: { 'Content-Type': 'application/json' },\r\n          body: JSON.stringify(this.registerForm),\r\n        })\r\n        const data = await res.json()\r\n        if (!res.ok) {\r\n          // Pode ter erros de validação no objeto data\r\n          if (typeof data === 'object') {\r\n            this.authError = Object.values(data).flat().join(', ')\r\n          } else {\r\n            this.authError = 'Erro ao registrar usuário'\r\n          }\r\n          this.loading = false\r\n          return\r\n        }\r\n        this.registerSuccess = true\r\n        this.loading = false\r\n        // Limpar formulário para evitar confusão\r\n        this.registerForm.username = ''\r\n        this.registerForm.password = ''\r\n        // Trocar para aba login para que usuário faça login\r\n        this.authTab = 'login'\r\n      } catch (error) {\r\n        this.authError = 'Erro na comunicação com o servidor'\r\n        this.loading = false\r\n      }\r\n    },\r\n    logout() {\r\n      this.isAuthenticated = false\r\n      this.token = null\r\n      this.user = null\r\n      this.board = null\r\n      localStorage.removeItem('token')\r\n    },\r\n    async loadBoard() {\r\n      if (!this.token) return\r\n      try {\r\n        const res = await fetch('/api/board/', {\r\n          headers: { Authorization: `Token ${this.token}` },\r\n        })\r\n        if (res.status === 401) {\r\n          // Token inválido ou expirado\r\n          this.logout()\r\n          return\r\n        }\r\n        if (!res.ok) throw new Error('Erro ao carregar board')\r\n        this.board = await res.json()\r\n      } catch {\r\n        this.board = null\r\n      }\r\n    },\r\n    async createBoard() {\r\n      if (!this.token) return\r\n      try {\r\n        const res = await fetch('/api/board/', {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n            Authorization: `Token ${this.token}`,\r\n          },\r\n          body: JSON.stringify({ name: 'Meu Board' }),\r\n        })\r\n        if (!res.ok) throw new Error('Erro ao criar board')\r\n        this.board = await res.json()\r\n      } catch (error) {\r\n        alert('Falha ao criar board.')\r\n      }\r\n    },\r\n    getColumnColor(columnId) {\r\n      const colors = ['#21BA45', '#2185D0', '#6435C9', '#F2711C']\r\n      return colors[columnId % colors.length]\r\n    },\r\n    isFormVisible(columnId) {\r\n      return this.visibleCardFormColumnId === columnId\r\n    },\r\n    showCardForm(columnId) {\r\n      this.visibleCardFormColumnId = columnId\r\n      this.newCard.title = ''\r\n      this.newCard.description = ''\r\n    },\r\n    cancelCard() {\r\n      this.visibleCardFormColumnId = null\r\n      this.newCard.title = ''\r\n      this.newCard.description = ''\r\n    },\r\n    async submitCard(columnId) {\r\n      if (!this.token) return\r\n      if (!this.newCard.title.trim()) return\r\n      try {\r\n        const res = await fetch(`/api/board/columns/${columnId}/cards/`, {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n            Authorization: `Token ${this.token}`,\r\n          },\r\n          body: JSON.stringify(this.newCard),\r\n        })\r\n        if (!res.ok) throw new Error('Erro ao criar card')\r\n        const card = await res.json()\r\n        // Atualiza localmente o board (simplificado)\r\n        const column = this.board.columns.find(c => c.id === columnId)\r\n        if (column) column.cards.push(card)\r\n        this.cancelCard()\r\n      } catch {\r\n        alert('Falha ao adicionar card.')\r\n      }\r\n    }\r\n  }\r\n}\r\n  \r\n\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}