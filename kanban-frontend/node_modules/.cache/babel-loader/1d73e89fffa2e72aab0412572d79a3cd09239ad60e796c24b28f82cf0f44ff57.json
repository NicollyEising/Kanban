{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.find.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport axios from 'axios';\nexport default {\n  data() {\n    return {\n      editingCard: null,\n      authTab: 'login',\n      loginForm: {\n        username: '',\n        password: ''\n      },\n      registerForm: {\n        username: '',\n        password: ''\n      },\n      authError: '',\n      registerSuccess: false,\n      loading: false,\n      isAuthenticated: false,\n      token: '',\n      board: null,\n      cardForms: {},\n      // Armazena quais colunas têm formulário visível\n      newCard: {\n        title: '',\n        description: ''\n      }\n    };\n  },\n  methods: {\n    startEditCard(card) {\n      this.editingCard = {\n        ...card\n      };\n    },\n    cancelEditCard() {\n      this.editingCard = null;\n    },\n    async submitEditCard() {\n      try {\n        await fetch(`http://localhost:8000/card/${this.editingCard.id}/`, {\n          method: 'PUT',\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: `Token ${this.token}`\n          },\n          body: JSON.stringify(this.editingCard)\n        });\n        this.fetchBoard(); // recarrega os dados\n        this.editingCard = null;\n      } catch (err) {\n        console.error(err);\n      }\n    },\n    async deleteCard(cardId) {\n      try {\n        await fetch(`http://localhost:8000/card/${cardId}/`, {\n          method: 'DELETE',\n          headers: {\n            Authorization: `Token ${this.token}`\n          }\n        });\n        this.fetchBoard();\n      } catch (err) {\n        console.error(err);\n      }\n    },\n    async login() {\n      this.loading = true;\n      this.authError = '';\n      try {\n        const response = await axios.post('http://localhost:8000/api/login/', this.loginForm);\n        this.token = response.data.token;\n        this.isAuthenticated = true;\n        await this.loadBoard();\n      } catch (error) {\n        this.authError = 'Usuário ou senha inválidos.';\n        console.error(error);\n      } finally {\n        this.loading = false;\n      }\n    },\n    async register() {\n      this.loading = true;\n      this.authError = '';\n      try {\n        await axios.post('http://localhost:8000/api/register/', this.registerForm);\n        this.registerSuccess = true;\n        this.authTab = 'login';\n      } catch (error) {\n        this.authError = 'Erro ao registrar. Tente outro nome de usuário.';\n        console.error(error);\n      } finally {\n        this.loading = false;\n      }\n    },\n    logout() {\n      this.token = '';\n      this.isAuthenticated = false;\n      this.board = null;\n      this.loginForm = {\n        username: '',\n        password: ''\n      };\n      this.registerForm = {\n        username: '',\n        password: ''\n      };\n    },\n    async loadBoard() {\n      try {\n        const response = await axios.get('http://localhost:8000/api/board/', {\n          headers: {\n            Authorization: `Token ${this.token}`\n          }\n        });\n        const boards = response.data;\n        if (Array.isArray(boards) && boards.length > 0) {\n          this.board = boards[0];\n        } else {\n          this.board = null;\n        }\n        console.log(\"Dados do board carregado:\", this.board);\n        this.initCardForms();\n      } catch (error) {\n        console.error('Erro ao carregar board:', error);\n      }\n    },\n    async createBoard() {\n      try {\n        const response = await axios.post('http://localhost:8000/api/board/', {\n          name: 'Meu Quadro'\n        }, {\n          headers: {\n            Authorization: `Token ${this.token}`\n          }\n        });\n        this.board = response.data;\n        this.initCardForms();\n      } catch (error) {\n        console.error('Erro ao criar board:', error);\n      }\n    },\n    initCardForms() {\n      this.cardForms = {};\n      if (this.board && this.board.columns) {\n        this.board.columns.forEach(col => {\n          this.cardForms[col.id] = false;\n        });\n      }\n    },\n    showCardForm(columnId) {\n      this.cancelCard();\n      this.cardForms[columnId] = true;\n    },\n    cancelCard() {\n      Object.keys(this.cardForms).forEach(key => {\n        this.cardForms[key] = false;\n      });\n      this.newCard = {\n        title: '',\n        description: ''\n      };\n    },\n    isFormVisible(columnId) {\n      return this.cardForms[columnId];\n    },\n    async submitCard(columnId) {\n      if (!this.newCard.title.trim()) return;\n      try {\n        const response = await axios.post('http://localhost:8000/api/card/', {\n          title: this.newCard.title,\n          description: this.newCard.description,\n          column: columnId\n        }, {\n          headers: {\n            Authorization: `Token ${this.token}`\n          }\n        });\n        const createdCard = response.data;\n        const column = this.board.columns.find(col => col.id === columnId);\n        if (column) {\n          column.cards.push(createdCard);\n        }\n        this.cancelCard();\n      } catch (error) {\n        console.error('Erro ao adicionar card:', error);\n      }\n    },\n    getColumnColor(columnId) {\n      const colors = ['#1abc9c', '#3498db', '#9b59b6', '#e67e22', '#e74c3c'];\n      return colors[columnId % colors.length];\n    }\n  },\n  mounted() {\n    // Verificação automática de token armazenado (opcional)\n    const storedToken = localStorage.getItem('kanban_token');\n    if (storedToken) {\n      this.token = storedToken;\n      this.isAuthenticated = true;\n      this.loadBoard();\n    }\n  },\n  watch: {\n    token(newVal) {\n      if (newVal) {\n        localStorage.setItem('kanban_token', newVal);\n      } else {\n        localStorage.removeItem('kanban_token');\n      }\n    }\n  }\n};","map":{"version":3,"names":["axios","data","editingCard","authTab","loginForm","username","password","registerForm","authError","registerSuccess","loading","isAuthenticated","token","board","cardForms","newCard","title","description","methods","startEditCard","card","cancelEditCard","submitEditCard","fetch","id","method","headers","Authorization","body","JSON","stringify","fetchBoard","err","console","error","deleteCard","cardId","login","response","post","loadBoard","register","logout","get","boards","Array","isArray","length","log","initCardForms","createBoard","name","columns","forEach","col","showCardForm","columnId","cancelCard","Object","keys","key","isFormVisible","submitCard","trim","column","createdCard","find","cards","push","getColumnColor","colors","mounted","storedToken","localStorage","getItem","watch","newVal","setItem","removeItem"],"sources":["C:/Users/faculdade/Desktop/Kanban/Kanban/kanban-frontend/src/KanbanBoard.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      editingCard: null,\r\n      authTab: 'login',\r\n      loginForm: {\r\n        username: '',\r\n        password: '',\r\n      },\r\n      registerForm: {\r\n        username: '',\r\n        password: '',\r\n      },\r\n      authError: '',\r\n      registerSuccess: false,\r\n      loading: false,\r\n      isAuthenticated: false,\r\n      token: '',\r\n      board: null,\r\n      cardForms: {}, // Armazena quais colunas têm formulário visível\r\n      newCard: {\r\n        title: '',\r\n        description: '',\r\n      },\r\n    };\r\n  },\r\n\r\n  methods: {\r\n\r\n\r\n    startEditCard(card) {\r\n      this.editingCard = { ...card };\r\n    },\r\n    cancelEditCard() {\r\n      this.editingCard = null;\r\n    },\r\n    async submitEditCard() {\r\n      try {\r\n        await fetch(`http://localhost:8000/card/${this.editingCard.id}/`, {\r\n          method: 'PUT',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n            Authorization: `Token ${this.token}`,\r\n          },\r\n          body: JSON.stringify(this.editingCard),\r\n        });\r\n        this.fetchBoard();  // recarrega os dados\r\n        this.editingCard = null;\r\n      } catch (err) {\r\n        console.error(err);\r\n      }\r\n    },\r\n    async deleteCard(cardId) {\r\n      try {\r\n        await fetch(`http://localhost:8000/card/${cardId}/`, {\r\n          method: 'DELETE',\r\n          headers: {\r\n            Authorization: `Token ${this.token}`,\r\n          },\r\n        });\r\n        this.fetchBoard();\r\n      } catch (err) {\r\n        console.error(err);\r\n      }\r\n    },\r\n\r\n\r\n\r\n\r\n    async login() {\r\n      this.loading = true;\r\n      this.authError = '';\r\n      try {\r\n        const response = await axios.post('http://localhost:8000/api/login/', this.loginForm);\r\n        this.token = response.data.token;\r\n        this.isAuthenticated = true;\r\n        await this.loadBoard();\r\n      } catch (error) {\r\n        this.authError = 'Usuário ou senha inválidos.';\r\n        console.error(error);\r\n      } finally {\r\n        this.loading = false;\r\n      }\r\n    },\r\n\r\n    async register() {\r\n      this.loading = true;\r\n      this.authError = '';\r\n      try {\r\n        await axios.post('http://localhost:8000/api/register/', this.registerForm);\r\n        this.registerSuccess = true;\r\n        this.authTab = 'login';\r\n      } catch (error) {\r\n        this.authError = 'Erro ao registrar. Tente outro nome de usuário.';\r\n        console.error(error);\r\n      } finally {\r\n        this.loading = false;\r\n      }\r\n    },\r\n\r\n    logout() {\r\n      this.token = '';\r\n      this.isAuthenticated = false;\r\n      this.board = null;\r\n      this.loginForm = { username: '', password: '' };\r\n      this.registerForm = { username: '', password: '' };\r\n    },\r\n    async loadBoard() {\r\n      try {\r\n        const response = await axios.get('http://localhost:8000/api/board/', {\r\n          headers: { Authorization: `Token ${this.token}` },\r\n        });\r\n        const boards = response.data;      \r\n        if (Array.isArray(boards) && boards.length > 0) {\r\n          this.board = boards[0];          \r\n        } else {\r\n          this.board = null;                \r\n        }\r\n        console.log(\"Dados do board carregado:\", this.board);\r\n        this.initCardForms();\r\n      } catch (error) {\r\n        console.error('Erro ao carregar board:', error);\r\n      }\r\n    },\r\n\r\n    async createBoard() {\r\n      try {\r\n        const response = await axios.post(\r\n          'http://localhost:8000/api/board/',\r\n          { name: 'Meu Quadro' },\r\n          { headers: { Authorization: `Token ${this.token}` } }\r\n        );\r\n        this.board = response.data;\r\n        this.initCardForms();\r\n      } catch (error) {\r\n        console.error('Erro ao criar board:', error);\r\n      }\r\n    },\r\n\r\n    initCardForms() {\r\n      this.cardForms = {};\r\n      if (this.board && this.board.columns) {\r\n        this.board.columns.forEach((col) => {\r\n          this.cardForms[col.id] = false;\r\n        });\r\n      }\r\n    },\r\n\r\n    showCardForm(columnId) {\r\n      this.cancelCard();\r\n      this.cardForms[columnId] = true;\r\n    },\r\n\r\n    cancelCard() {\r\n      Object.keys(this.cardForms).forEach((key) => {\r\n        this.cardForms[key] = false;\r\n      });\r\n      this.newCard = { title: '', description: '' };\r\n    },\r\n\r\n    isFormVisible(columnId) {\r\n      return this.cardForms[columnId];\r\n    },\r\n\r\n    async submitCard(columnId) {\r\n      if (!this.newCard.title.trim()) return;\r\n      try {\r\n        const response = await axios.post(\r\n          'http://localhost:8000/api/card/',\r\n          {\r\n            title: this.newCard.title,\r\n            description: this.newCard.description,\r\n            column: columnId,\r\n          },\r\n          { headers: { Authorization: `Token ${this.token}` } }\r\n        );\r\n        const createdCard = response.data;\r\n        const column = this.board.columns.find((col) => col.id === columnId);\r\n        if (column) {\r\n          column.cards.push(createdCard);\r\n        }\r\n        this.cancelCard();\r\n      } catch (error) {\r\n        console.error('Erro ao adicionar card:', error);\r\n      }\r\n    },\r\n    \r\n\r\n    getColumnColor(columnId) {\r\n      const colors = ['#1abc9c', '#3498db', '#9b59b6', '#e67e22', '#e74c3c'];\r\n      return colors[columnId % colors.length];\r\n    },\r\n  },\r\n\r\n  mounted() {\r\n    // Verificação automática de token armazenado (opcional)\r\n    const storedToken = localStorage.getItem('kanban_token');\r\n    if (storedToken) {\r\n      this.token = storedToken;\r\n      this.isAuthenticated = true;\r\n      this.loadBoard();\r\n    }\r\n  },\r\n\r\n  watch: {\r\n    token(newVal) {\r\n      if (newVal) {\r\n        localStorage.setItem('kanban_token', newVal);\r\n      } else {\r\n        localStorage.removeItem('kanban_token');\r\n      }\r\n    },\r\n\r\n\r\n    \r\n  },\r\n\r\n\r\n\r\n  \r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}