{"ast":null,"code":"import axios from 'axios';\nexport default {\n  name: 'KanbanBoard',\n  data() {\n    return {\n      board: null,\n      cardFormColumnId: null,\n      newCard: {\n        title: '',\n        description: ''\n      }\n    };\n  },\n  methods: {\n    async createBoard() {\n      try {\n        const boardRes = await axios.post('http://localhost:8000/api/board/', {\n          name: 'Meu Novo Quadro'\n        });\n        const boardId = boardRes.data.id;\n        const columnNames = ['A Fazer', 'Fazendo', 'Feito'];\n        await Promise.all(columnNames.map((name, index) => axios.post('http://localhost:8000/api/column/', {\n          name,\n          order: index,\n          board: boardId\n        })));\n        const updatedBoard = await axios.get(`http://localhost:8000/api/board/${boardId}/`);\n        this.board = updatedBoard.data;\n      } catch (error) {\n        console.error('Erro ao criar o board:', error);\n      }\n    },\n    showCardForm(columnId) {\n      this.cardFormColumnId = columnId;\n      this.newCard.title = '';\n      this.newCard.description = '';\n    },\n    cancelCard() {\n      this.cardFormColumnId = null;\n      this.newCard.title = '';\n      this.newCard.description = '';\n    },\n    isFormVisible(columnId) {\n      return this.cardFormColumnId === columnId;\n    },\n    async submitCard(columnId) {\n      if (!this.newCard.title.trim()) {\n        return;\n      }\n      try {\n        await axios.post('http://localhost:8000/api/card/', {\n          title: this.newCard.title.trim(),\n          description: this.newCard.description.trim(),\n          order: 0,\n          column: columnId\n        });\n        const updatedBoard = await axios.get(`http://localhost:8000/api/board/${this.board.id}/`);\n        this.board = updatedBoard.data;\n        this.cancelCard();\n      } catch (error) {\n        console.error('Erro ao criar card:', error);\n      }\n    },\n    getColumnColor(columnId) {\n      const colors = ['#4CAF50',\n      // Verde\n      '#03A9F4',\n      // Azul\n      '#FFC107',\n      // Laranja\n      '#F44336',\n      // Vermelho\n      '#9C27B0',\n      // Roxo\n      '#795548' // Marrom\n      ];\n      return colors[columnId % colors.length];\n    }\n  }\n};","map":{"version":3,"names":["axios","name","data","board","cardFormColumnId","newCard","title","description","methods","createBoard","boardRes","post","boardId","id","columnNames","Promise","all","map","index","order","updatedBoard","get","error","console","showCardForm","columnId","cancelCard","isFormVisible","submitCard","trim","column","getColumnColor","colors","length"],"sources":["C:/Users/faculdade/Desktop/Kanban/Kanban/kanban-frontend/src/KanbanBoard.js"],"sourcesContent":["import axios from 'axios'\r\n\r\nexport default {\r\n  name: 'KanbanBoard',\r\n  data() {\r\n    return {\r\n      board: null,\r\n      cardFormColumnId: null,\r\n      newCard: {\r\n        title: '',\r\n        description: '',\r\n      },\r\n    }\r\n  },\r\n  methods: {\r\n    async createBoard() {\r\n      try {\r\n        const boardRes = await axios.post('http://localhost:8000/api/board/', {\r\n          name: 'Meu Novo Quadro',\r\n        })\r\n        const boardId = boardRes.data.id\r\n\r\n        const columnNames = ['A Fazer', 'Fazendo', 'Feito']\r\n        await Promise.all(\r\n          columnNames.map((name, index) =>\r\n            axios.post('http://localhost:8000/api/column/', {\r\n              name,\r\n              order: index,\r\n              board: boardId,\r\n            })\r\n          )\r\n        )\r\n\r\n        const updatedBoard = await axios.get(\r\n          `http://localhost:8000/api/board/${boardId}/`\r\n        )\r\n        this.board = updatedBoard.data\r\n      } catch (error) {\r\n        console.error('Erro ao criar o board:', error)\r\n      }\r\n    },\r\n    showCardForm(columnId) {\r\n      this.cardFormColumnId = columnId\r\n      this.newCard.title = ''\r\n      this.newCard.description = ''\r\n    },\r\n    cancelCard() {\r\n      this.cardFormColumnId = null\r\n      this.newCard.title = ''\r\n      this.newCard.description = ''\r\n    },\r\n    isFormVisible(columnId) {\r\n      return this.cardFormColumnId === columnId\r\n    },\r\n    async submitCard(columnId) {\r\n      if (!this.newCard.title.trim()) {\r\n        return\r\n      }\r\n      try {\r\n        await axios.post('http://localhost:8000/api/card/', {\r\n          title: this.newCard.title.trim(),\r\n          description: this.newCard.description.trim(),\r\n          order: 0,\r\n          column: columnId,\r\n        })\r\n        const updatedBoard = await axios.get(\r\n          `http://localhost:8000/api/board/${this.board.id}/`\r\n        )\r\n        this.board = updatedBoard.data\r\n        this.cancelCard()\r\n      } catch (error) {\r\n        console.error('Erro ao criar card:', error)\r\n      }\r\n    },\r\n    getColumnColor(columnId) {\r\n      const colors = [\r\n        '#4CAF50', // Verde\r\n        '#03A9F4', // Azul\r\n        '#FFC107', // Laranja\r\n        '#F44336', // Vermelho\r\n        '#9C27B0', // Roxo\r\n        '#795548', // Marrom\r\n      ];\r\n      return colors[columnId % colors.length];\r\n    },\r\n  },\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}