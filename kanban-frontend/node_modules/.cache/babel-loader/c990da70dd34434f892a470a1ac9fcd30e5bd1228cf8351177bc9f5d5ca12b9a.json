{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.find.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport axios from 'axios';\nexport default {\n  data() {\n    return {\n      authTab: 'login',\n      loginForm: {\n        username: '',\n        password: ''\n      },\n      registerForm: {\n        username: '',\n        password: ''\n      },\n      authError: '',\n      registerSuccess: false,\n      loading: false,\n      isAuthenticated: false,\n      token: '',\n      board: null,\n      cardForms: {},\n      // Armazena quais colunas têm formulário visível\n      newCard: {\n        title: '',\n        description: ''\n      }\n    };\n  },\n  methods: {\n    async login() {\n      this.loading = true;\n      this.authError = '';\n      try {\n        const response = await axios.post('http://localhost:8000/api/login/', this.loginForm);\n        this.token = response.data.token;\n        this.isAuthenticated = true;\n        await this.loadBoard();\n      } catch (error) {\n        this.authError = 'Usuário ou senha inválidos.';\n        console.error(error);\n      } finally {\n        this.loading = false;\n      }\n    },\n    async register() {\n      this.loading = true;\n      this.authError = '';\n      try {\n        await axios.post('http://localhost:8000/api/register/', this.registerForm);\n        this.registerSuccess = true;\n        this.authTab = 'login';\n      } catch (error) {\n        this.authError = 'Erro ao registrar. Tente outro nome de usuário.';\n        console.error(error);\n      } finally {\n        this.loading = false;\n      }\n    },\n    logout() {\n      this.token = '';\n      this.isAuthenticated = false;\n      this.board = null;\n      this.loginForm = {\n        username: '',\n        password: ''\n      };\n      this.registerForm = {\n        username: '',\n        password: ''\n      };\n    },\n    async loadBoard() {\n      try {\n        const response = await axios.get('http://localhost:8000/api/board/', {\n          headers: {\n            Authorization: `Token ${this.token}`\n          }\n        });\n        this.board = response.data;\n        this.initCardForms();\n      } catch (error) {\n        console.error('Erro ao carregar board:', error);\n      }\n    },\n    async createBoard() {\n      try {\n        const response = await axios.post('http://localhost:8000/api/board/', {\n          name: 'Meu Quadro'\n        }, {\n          headers: {\n            Authorization: `Token ${this.token}`\n          }\n        });\n        this.board = response.data;\n        this.initCardForms();\n      } catch (error) {\n        console.error('Erro ao criar board:', error);\n      }\n    },\n    initCardForms() {\n      this.cardForms = {};\n      if (this.board && this.board.columns) {\n        this.board.columns.forEach(col => {\n          this.cardForms[col.id] = false;\n        });\n      }\n    },\n    showCardForm(columnId) {\n      this.cancelCard();\n      this.cardForms[columnId] = true;\n    },\n    cancelCard() {\n      Object.keys(this.cardForms).forEach(key => {\n        this.cardForms[key] = false;\n      });\n      this.newCard = {\n        title: '',\n        description: ''\n      };\n    },\n    isFormVisible(columnId) {\n      return this.cardForms[columnId];\n    },\n    async submitCard(columnId) {\n      if (!this.newCard.title.trim()) return;\n      try {\n        const response = await axios.post(`http://localhost:8000/api/columns/${columnId}/cards/`, this.newCard, {\n          headers: {\n            Authorization: `Token ${this.token}`\n          }\n        });\n        const createdCard = response.data;\n        const column = this.board.columns.find(col => col.id === columnId);\n        if (column) {\n          column.cards.push(createdCard);\n        }\n        this.cancelCard();\n      } catch (error) {\n        console.error('Erro ao adicionar card:', error);\n      }\n    },\n    getColumnColor(columnId) {\n      const colors = ['#1abc9c', '#3498db', '#9b59b6', '#e67e22', '#e74c3c'];\n      return colors[columnId % colors.length];\n    }\n  },\n  mounted() {\n    // Verificação automática de token armazenado (opcional)\n    const storedToken = localStorage.getItem('kanban_token');\n    if (storedToken) {\n      this.token = storedToken;\n      this.isAuthenticated = true;\n      this.loadBoard();\n    }\n  },\n  watch: {\n    token(newVal) {\n      if (newVal) {\n        localStorage.setItem('kanban_token', newVal);\n      } else {\n        localStorage.removeItem('kanban_token');\n      }\n    }\n  }\n};","map":{"version":3,"names":["axios","data","authTab","loginForm","username","password","registerForm","authError","registerSuccess","loading","isAuthenticated","token","board","cardForms","newCard","title","description","methods","login","response","post","loadBoard","error","console","register","logout","get","headers","Authorization","initCardForms","createBoard","name","columns","forEach","col","id","showCardForm","columnId","cancelCard","Object","keys","key","isFormVisible","submitCard","trim","createdCard","column","find","cards","push","getColumnColor","colors","length","mounted","storedToken","localStorage","getItem","watch","newVal","setItem","removeItem"],"sources":["C:/Users/faculdade/Desktop/Kanban/Kanban/kanban-frontend/src/KanbanBoard.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      authTab: 'login',\r\n      loginForm: {\r\n        username: '',\r\n        password: '',\r\n      },\r\n      registerForm: {\r\n        username: '',\r\n        password: '',\r\n      },\r\n      authError: '',\r\n      registerSuccess: false,\r\n      loading: false,\r\n      isAuthenticated: false,\r\n      token: '',\r\n      board: null,\r\n      cardForms: {}, // Armazena quais colunas têm formulário visível\r\n      newCard: {\r\n        title: '',\r\n        description: '',\r\n      },\r\n    };\r\n  },\r\n\r\n  methods: {\r\n    async login() {\r\n      this.loading = true;\r\n      this.authError = '';\r\n      try {\r\n        const response = await axios.post('http://localhost:8000/api/login/', this.loginForm);\r\n        this.token = response.data.token;\r\n        this.isAuthenticated = true;\r\n        await this.loadBoard();\r\n      } catch (error) {\r\n        this.authError = 'Usuário ou senha inválidos.';\r\n        console.error(error);\r\n      } finally {\r\n        this.loading = false;\r\n      }\r\n    },\r\n\r\n    async register() {\r\n      this.loading = true;\r\n      this.authError = '';\r\n      try {\r\n        await axios.post('http://localhost:8000/api/register/', this.registerForm);\r\n        this.registerSuccess = true;\r\n        this.authTab = 'login';\r\n      } catch (error) {\r\n        this.authError = 'Erro ao registrar. Tente outro nome de usuário.';\r\n        console.error(error);\r\n      } finally {\r\n        this.loading = false;\r\n      }\r\n    },\r\n\r\n    logout() {\r\n      this.token = '';\r\n      this.isAuthenticated = false;\r\n      this.board = null;\r\n      this.loginForm = { username: '', password: '' };\r\n      this.registerForm = { username: '', password: '' };\r\n    },\r\n\r\n    async loadBoard() {\r\n      try {\r\n        const response = await axios.get('http://localhost:8000/api/board/', {\r\n          headers: { Authorization: `Token ${this.token}` },\r\n        });\r\n        this.board = response.data;\r\n        this.initCardForms();\r\n      } catch (error) {\r\n        console.error('Erro ao carregar board:', error);\r\n      }\r\n    },\r\n\r\n    async createBoard() {\r\n      try {\r\n        const response = await axios.post(\r\n          'http://localhost:8000/api/board/',\r\n          { name: 'Meu Quadro' },\r\n          { headers: { Authorization: `Token ${this.token}` } }\r\n        );\r\n        this.board = response.data;\r\n        this.initCardForms();\r\n      } catch (error) {\r\n        console.error('Erro ao criar board:', error);\r\n      }\r\n    },\r\n\r\n    initCardForms() {\r\n      this.cardForms = {};\r\n      if (this.board && this.board.columns) {\r\n        this.board.columns.forEach((col) => {\r\n          this.cardForms[col.id] = false;\r\n        });\r\n      }\r\n    },\r\n\r\n    showCardForm(columnId) {\r\n      this.cancelCard();\r\n      this.cardForms[columnId] = true;\r\n    },\r\n\r\n    cancelCard() {\r\n      Object.keys(this.cardForms).forEach((key) => {\r\n        this.cardForms[key] = false;\r\n      });\r\n      this.newCard = { title: '', description: '' };\r\n    },\r\n\r\n    isFormVisible(columnId) {\r\n      return this.cardForms[columnId];\r\n    },\r\n\r\n    async submitCard(columnId) {\r\n      if (!this.newCard.title.trim()) return;\r\n      try {\r\n        const response = await axios.post(\r\n          `http://localhost:8000/api/columns/${columnId}/cards/`,\r\n          this.newCard,\r\n          { headers: { Authorization: `Token ${this.token}` } }\r\n        );\r\n        const createdCard = response.data;\r\n        const column = this.board.columns.find((col) => col.id === columnId);\r\n        if (column) {\r\n          column.cards.push(createdCard);\r\n        }\r\n        this.cancelCard();\r\n      } catch (error) {\r\n        console.error('Erro ao adicionar card:', error);\r\n      }\r\n    },\r\n\r\n    getColumnColor(columnId) {\r\n      const colors = ['#1abc9c', '#3498db', '#9b59b6', '#e67e22', '#e74c3c'];\r\n      return colors[columnId % colors.length];\r\n    },\r\n  },\r\n\r\n  mounted() {\r\n    // Verificação automática de token armazenado (opcional)\r\n    const storedToken = localStorage.getItem('kanban_token');\r\n    if (storedToken) {\r\n      this.token = storedToken;\r\n      this.isAuthenticated = true;\r\n      this.loadBoard();\r\n    }\r\n  },\r\n\r\n  watch: {\r\n    token(newVal) {\r\n      if (newVal) {\r\n        localStorage.setItem('kanban_token', newVal);\r\n      } else {\r\n        localStorage.removeItem('kanban_token');\r\n      }\r\n    },\r\n  },\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}