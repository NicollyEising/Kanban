{"ast":null,"code":"import axios from 'axios';\nexport default {\n  name: 'KanbanBoard',\n  data() {\n    return {\n      board: null,\n      cardFormColumnId: null,\n      newCard: {\n        title: '',\n        description: ''\n      }\n    };\n  },\n  methods: {\n    async createBoard() {\n      try {\n        const boardRes = await axios.post('http://localhost:8000/api/board/', {\n          name: 'Meu Novo Quadro'\n        });\n        const boardId = boardRes.data.id;\n        const columnNames = ['A Fazer', 'Fazendo', 'Feito'];\n        await Promise.all(columnNames.map((name, index) => axios.post('http://localhost:8000/api/column/', {\n          name,\n          order: index,\n          board: boardId\n        })));\n        const updatedBoard = await axios.get(`http://localhost:8000/api/board/${boardId}/`);\n        this.board = updatedBoard.data;\n      } catch (error) {\n        console.error('Erro ao criar o board:', error);\n      }\n    },\n    showCardForm(columnId) {\n      this.cardFormColumnId = columnId;\n      this.newCard.title = '';\n      this.newCard.description = '';\n    },\n    cancelCard() {\n      this.cardFormColumnId = null;\n      this.newCard.title = '';\n      this.newCard.description = '';\n    },\n    isFormVisible(columnId) {\n      return this.cardFormColumnId === columnId;\n    },\n    async submitCard(columnId) {\n      if (!this.newCard.title.trim()) {\n        return;\n      }\n      try {\n        await axios.post('http://localhost:8000/api/card/', {\n          title: this.newCard.title.trim(),\n          description: this.newCard.description.trim(),\n          order: 0,\n          column: columnId\n        });\n        const updatedBoard = await axios.get(`http://localhost:8000/api/board/${this.board.id}/`);\n        this.board = updatedBoard.data;\n        this.cancelCard();\n      } catch (error) {\n        console.error('Erro ao criar card:', error);\n      }\n    }\n  }\n};","map":{"version":3,"names":["axios","name","data","board","cardFormColumnId","newCard","title","description","methods","createBoard","boardRes","post","boardId","id","columnNames","Promise","all","map","index","order","updatedBoard","get","error","console","showCardForm","columnId","cancelCard","isFormVisible","submitCard","trim","column"],"sources":["C:\\Users\\faculdade\\Desktop\\Kanban\\Kanban\\kanban-frontend\\src\\KanbanBoard.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <!-- Botão aparece somente se não existir nenhum board -->\r\n    <button v-if=\"!board\" @click=\"createBoard\" class=\"create-button\">\r\n      Criar Novo Board\r\n    </button>\r\n\r\n    <!-- Exibe o board quando criado -->\r\n    <div v-if=\"board\" class=\"kanban-board\">\r\n      <h1 class=\"board-title\">{{ board.name }}</h1>\r\n      <div class=\"columns\">\r\n        <div class=\"column\" v-for=\"column in board.columns\" :key=\"column.id\">\r\n          <h2 class=\"column-title\">{{ column.name }}</h2>\r\n\r\n          <button\r\n            @click=\"showCardForm(column.id)\"\r\n            class=\"create-card-button\"\r\n            v-if=\"!isFormVisible(column.id)\"\r\n          >\r\n            Criar Card\r\n          </button>\r\n\r\n          <div v-if=\"isFormVisible(column.id)\" class=\"card-form\">\r\n            <input\r\n              type=\"text\"\r\n              v-model=\"newCard.title\"\r\n              placeholder=\"Título do card\"\r\n              class=\"card-input\"\r\n            />\r\n            <textarea\r\n              v-model=\"newCard.description\"\r\n              placeholder=\"Descrição do card\"\r\n              class=\"card-textarea\"\r\n            ></textarea>\r\n            <div class=\"form-buttons\">\r\n              <button\r\n                @click=\"submitCard(column.id)\"\r\n                class=\"submit-button\"\r\n                :disabled=\"!newCard.title.trim()\"\r\n              >\r\n                Salvar\r\n              </button>\r\n              <button @click=\"cancelCard()\" class=\"cancel-button\">\r\n                Cancelar\r\n              </button>\r\n            </div>\r\n          </div>\r\n\r\n          <ul class=\"cards-list\">\r\n            <li class=\"card\" v-for=\"card in column.cards\" :key=\"card.id\">\r\n              <strong class=\"card-title\">{{ card.title }}</strong>\r\n              <p class=\"card-description\">{{ card.description }}</p>\r\n            </li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from 'axios'\r\n\r\nexport default {\r\n  name: 'KanbanBoard',\r\n  data() {\r\n    return {\r\n      board: null,\r\n      cardFormColumnId: null,\r\n      newCard: {\r\n        title: '',\r\n        description: '',\r\n      },\r\n    }\r\n  },\r\n  methods: {\r\n    async createBoard() {\r\n      try {\r\n        const boardRes = await axios.post('http://localhost:8000/api/board/', {\r\n          name: 'Meu Novo Quadro',\r\n        })\r\n        const boardId = boardRes.data.id\r\n\r\n        const columnNames = ['A Fazer', 'Fazendo', 'Feito']\r\n        await Promise.all(\r\n          columnNames.map((name, index) =>\r\n            axios.post('http://localhost:8000/api/column/', {\r\n              name,\r\n              order: index,\r\n              board: boardId,\r\n            })\r\n          )\r\n        )\r\n\r\n        const updatedBoard = await axios.get(\r\n          `http://localhost:8000/api/board/${boardId}/`\r\n        )\r\n        this.board = updatedBoard.data\r\n      } catch (error) {\r\n        console.error('Erro ao criar o board:', error)\r\n      }\r\n    },\r\n    showCardForm(columnId) {\r\n      this.cardFormColumnId = columnId\r\n      this.newCard.title = ''\r\n      this.newCard.description = ''\r\n    },\r\n    cancelCard() {\r\n      this.cardFormColumnId = null\r\n      this.newCard.title = ''\r\n      this.newCard.description = ''\r\n    },\r\n    isFormVisible(columnId) {\r\n      return this.cardFormColumnId === columnId\r\n    },\r\n    async submitCard(columnId) {\r\n      if (!this.newCard.title.trim()) {\r\n        return\r\n      }\r\n      try {\r\n        await axios.post('http://localhost:8000/api/card/', {\r\n          title: this.newCard.title.trim(),\r\n          description: this.newCard.description.trim(),\r\n          order: 0,\r\n          column: columnId,\r\n        })\r\n        const updatedBoard = await axios.get(\r\n          `http://localhost:8000/api/board/${this.board.id}/`\r\n        )\r\n        this.board = updatedBoard.data\r\n        this.cancelCard()\r\n      } catch (error) {\r\n        console.error('Erro ao criar card:', error)\r\n      }\r\n    },\r\n  },\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.create-button {\r\n  margin: 16px auto;\r\n  display: block;\r\n  padding: 10px 20px;\r\n  background-color: #2980b9;\r\n  color: white;\r\n  border: none;\r\n  border-radius: 6px;\r\n  cursor: pointer;\r\n  font-size: 1rem;\r\n}\r\n.create-button:hover {\r\n  background-color: #1c6fa0;\r\n}\r\n\r\n.create-card-button {\r\n  margin-bottom: 12px;\r\n  padding: 6px 12px;\r\n  background-color: #27ae60;\r\n  color: white;\r\n  border: none;\r\n  border-radius: 4px;\r\n  cursor: pointer;\r\n  font-size: 0.9rem;\r\n}\r\n.create-card-button:hover {\r\n  background-color: #1e8449;\r\n}\r\n\r\n.card-form {\r\n  margin-bottom: 12px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 8px;\r\n}\r\n\r\n.card-input,\r\n.card-textarea {\r\n  width: 100%;\r\n  padding: 8px 10px;\r\n  font-size: 0.9rem;\r\n  border: 1px solid #bbb;\r\n  border-radius: 4px;\r\n  resize: vertical;\r\n}\r\n\r\n.card-textarea {\r\n  min-height: 60px;\r\n}\r\n\r\n.form-buttons {\r\n  display: flex;\r\n  gap: 8px;\r\n}\r\n\r\n.submit-button {\r\n  background-color: #2980b9;\r\n  color: white;\r\n  border: none;\r\n  border-radius: 4px;\r\n  padding: 6px 12px;\r\n  cursor: pointer;\r\n  font-size: 0.9rem;\r\n}\r\n.submit-button:disabled {\r\n  background-color: #7fb3d5;\r\n  cursor: not-allowed;\r\n}\r\n.submit-button:hover:enabled {\r\n  background-color: #1c6fa0;\r\n}\r\n\r\n.cancel-button {\r\n  background-color: #bbb;\r\n  color: #333;\r\n  border: none;\r\n  border-radius: 4px;\r\n  padding: 6px 12px;\r\n  cursor: pointer;\r\n  font-size: 0.9rem;\r\n}\r\n.cancel-button:hover {\r\n  background-color: #999;\r\n}\r\n\r\n.kanban-board {\r\n  max-width: 1000px;\r\n  margin: 0 auto;\r\n  font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\r\n  color: #333;\r\n}\r\n\r\n.board-title {\r\n  text-align: center;\r\n  margin-bottom: 24px;\r\n  font-size: 2rem;\r\n  font-weight: 700;\r\n  color: #2c3e50;\r\n}\r\n\r\n.columns {\r\n  display: flex;\r\n  gap: 24px;\r\n  overflow-x: auto;\r\n  padding-bottom: 16px;\r\n}\r\n\r\n.column {\r\n  background-color: #ffffff;\r\n  border-radius: 8px;\r\n  box-shadow: 0 2px 6px rgb(0 0 0 / 0.1);\r\n  padding: 16px;\r\n  min-width: 280px;\r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n\r\n.column-title {\r\n  font-size: 1.25rem;\r\n  margin-bottom: 16px;\r\n  color: #34495e;\r\n  border-bottom: 2px solid #2980b9;\r\n  padding-bottom: 8px;\r\n}\r\n\r\n.cards-list {\r\n  list-style: none;\r\n  padding: 0;\r\n  margin: 0;\r\n  flex-grow: 1;\r\n  overflow-y: auto;\r\n}\r\n\r\n.card {\r\n  background-color: #ecf0f1;\r\n  border-radius: 6px;\r\n  padding: 12px 16px;\r\n  margin-bottom: 12px;\r\n  box-shadow: 0 1px 3px rgb(0 0 0 / 0.1);\r\n  transition: background-color 0.2s ease;\r\n}\r\n\r\n.card:hover {\r\n  background-color: #d0e6f7;\r\n}\r\n\r\n.card-title {\r\n  display: block;\r\n  font-weight: 600;\r\n  margin-bottom: 6px;\r\n  color: #2c3e50;\r\n}\r\n\r\n.card-description {\r\n  font-size: 0.9rem;\r\n  color: #555;\r\n  margin: 0;\r\n}\r\n\r\n.loading {\r\n  font-size: 1.2rem;\r\n  color: #666;\r\n  text-align: center;\r\n  padding: 40px 0;\r\n}\r\n</style>\r\n"],"mappings":"AA6DA,OAAOA,KAAI,MAAO,OAAM;AAExB,eAAe;EACbC,IAAI,EAAE,aAAa;EACnBC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,KAAK,EAAE,IAAI;MACXC,gBAAgB,EAAE,IAAI;MACtBC,OAAO,EAAE;QACPC,KAAK,EAAE,EAAE;QACTC,WAAW,EAAE;MACf;IACF;EACF,CAAC;EACDC,OAAO,EAAE;IACP,MAAMC,WAAWA,CAAA,EAAG;MAClB,IAAI;QACF,MAAMC,QAAO,GAAI,MAAMV,KAAK,CAACW,IAAI,CAAC,kCAAkC,EAAE;UACpEV,IAAI,EAAE;QACR,CAAC;QACD,MAAMW,OAAM,GAAIF,QAAQ,CAACR,IAAI,CAACW,EAAC;QAE/B,MAAMC,WAAU,GAAI,CAAC,SAAS,EAAE,SAAS,EAAE,OAAO;QAClD,MAAMC,OAAO,CAACC,GAAG,CACfF,WAAW,CAACG,GAAG,CAAC,CAAChB,IAAI,EAAEiB,KAAK,KAC1BlB,KAAK,CAACW,IAAI,CAAC,mCAAmC,EAAE;UAC9CV,IAAI;UACJkB,KAAK,EAAED,KAAK;UACZf,KAAK,EAAES;QACT,CAAC,CACH,CACF;QAEA,MAAMQ,YAAW,GAAI,MAAMpB,KAAK,CAACqB,GAAG,CAClC,mCAAmCT,OAAO,GAC5C;QACA,IAAI,CAACT,KAAI,GAAIiB,YAAY,CAAClB,IAAG;MAC/B,EAAE,OAAOoB,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK;MAC/C;IACF,CAAC;IACDE,YAAYA,CAACC,QAAQ,EAAE;MACrB,IAAI,CAACrB,gBAAe,GAAIqB,QAAO;MAC/B,IAAI,CAACpB,OAAO,CAACC,KAAI,GAAI,EAAC;MACtB,IAAI,CAACD,OAAO,CAACE,WAAU,GAAI,EAAC;IAC9B,CAAC;IACDmB,UAAUA,CAAA,EAAG;MACX,IAAI,CAACtB,gBAAe,GAAI,IAAG;MAC3B,IAAI,CAACC,OAAO,CAACC,KAAI,GAAI,EAAC;MACtB,IAAI,CAACD,OAAO,CAACE,WAAU,GAAI,EAAC;IAC9B,CAAC;IACDoB,aAAaA,CAACF,QAAQ,EAAE;MACtB,OAAO,IAAI,CAACrB,gBAAe,KAAMqB,QAAO;IAC1C,CAAC;IACD,MAAMG,UAAUA,CAACH,QAAQ,EAAE;MACzB,IAAI,CAAC,IAAI,CAACpB,OAAO,CAACC,KAAK,CAACuB,IAAI,CAAC,CAAC,EAAE;QAC9B;MACF;MACA,IAAI;QACF,MAAM7B,KAAK,CAACW,IAAI,CAAC,iCAAiC,EAAE;UAClDL,KAAK,EAAE,IAAI,CAACD,OAAO,CAACC,KAAK,CAACuB,IAAI,CAAC,CAAC;UAChCtB,WAAW,EAAE,IAAI,CAACF,OAAO,CAACE,WAAW,CAACsB,IAAI,CAAC,CAAC;UAC5CV,KAAK,EAAE,CAAC;UACRW,MAAM,EAAEL;QACV,CAAC;QACD,MAAML,YAAW,GAAI,MAAMpB,KAAK,CAACqB,GAAG,CAClC,mCAAmC,IAAI,CAAClB,KAAK,CAACU,EAAE,GAClD;QACA,IAAI,CAACV,KAAI,GAAIiB,YAAY,CAAClB,IAAG;QAC7B,IAAI,CAACwB,UAAU,CAAC;MAClB,EAAE,OAAOJ,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,qBAAqB,EAAEA,KAAK;MAC5C;IACF;EACF;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}