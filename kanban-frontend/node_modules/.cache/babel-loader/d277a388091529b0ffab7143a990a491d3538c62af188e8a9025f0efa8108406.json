{"ast":null,"code":"import axios from 'axios';\nexport default {\n  name: 'KanbanApp',\n  data() {\n    return {\n      // Autenticação\n      authTab: 'login',\n      isAuthenticated: false,\n      token: null,\n      user: null,\n      loading: false,\n      authError: null,\n      registerSuccess: false,\n      loginForm: {\n        username: '',\n        password: ''\n      },\n      registerForm: {\n        username: '',\n        password: ''\n      },\n      // Dados do board e cards\n      board: null,\n      cardFormColumnId: null,\n      newCard: {\n        title: '',\n        description: ''\n      }\n    };\n  },\n  created() {\n    // Recupera token e carrega board se autenticado\n    this.token = localStorage.getItem('token');\n    if (this.token) {\n      this.isAuthenticated = true;\n      this.loadBoard();\n    }\n  },\n  methods: {\n    // Login\n    async login() {\n      this.loading = true;\n      this.authError = null;\n      this.registerSuccess = false;\n      try {\n        const res = await axios.post('http://localhost:8000/api/login/', this.loginForm);\n        this.token = res.data.token;\n        this.user = {\n          id: res.data.user_id,\n          username: res.data.username\n        };\n        localStorage.setItem('token', this.token);\n        this.isAuthenticated = true;\n        this.loading = false;\n        this.authTab = 'login';\n        this.loginForm.username = '';\n        this.loginForm.password = '';\n        await this.loadBoard();\n      } catch (error) {\n        if (error.response && error.response.data) {\n          const data = error.response.data;\n          this.authError = data.non_field_errors ? data.non_field_errors.join(', ') : data.detail || 'Erro ao fazer login';\n        } else {\n          this.authError = 'Erro na comunicação com o servidor';\n        }\n        this.loading = false;\n      }\n    },\n    // Cadastro\n    async register() {\n      this.loading = true;\n      this.authError = null;\n      this.registerSuccess = false;\n      try {\n        // Faz o registro\n        await axios.post('http://localhost:8000/api/register/', this.registerForm);\n\n        // Após sucesso, faz login automático usando os dados cadastrados\n        this.loginForm.username = this.registerForm.username;\n        this.loginForm.password = this.registerForm.password;\n\n        // Limpa o formulário de cadastro\n        this.registerForm.username = '';\n        this.registerForm.password = '';\n\n        // Chama login automático\n        await this.login();\n        this.loading = false;\n      } catch (error) {\n        if (error.response && error.response.data) {\n          const data = error.response.data;\n          if (typeof data === 'object') {\n            this.authError = Object.values(data).flat().join(', ');\n          } else {\n            this.authError = 'Erro ao registrar usuário';\n          }\n        } else {\n          this.authError = 'Erro na comunicação com o servidor';\n        }\n        this.loading = false;\n      }\n    },\n    // Logout\n    logout() {\n      this.isAuthenticated = false;\n      this.token = null;\n      this.user = null;\n      this.board = null;\n      localStorage.removeItem('token');\n    },\n    // Carregar board\n    async loadBoard() {\n      if (!this.token) return;\n      try {\n        const res = await axios.get('http://localhost:8000/api/board/', {\n          headers: {\n            Authorization: `Token ${this.token}`\n          }\n        });\n        this.board = res.data;\n      } catch (error) {\n        if (error.response && error.response.status === 401) {\n          this.logout();\n        } else {\n          this.board = null;\n        }\n      }\n    },\n    // Criar board\n    async createBoard() {\n      if (!this.token) return;\n      try {\n        const res = await axios.post('http://localhost:8000/api/board/', {\n          name: 'Meu Novo Quadro'\n        }, {\n          headers: {\n            Authorization: `Token ${this.token}`\n          }\n        });\n        const boardId = res.data.id;\n        const columnNames = ['A Fazer', 'Fazendo', 'Feito'];\n        await Promise.all(columnNames.map((name, index) => axios.post('http://localhost:8000/api/column/', {\n          name,\n          order: index,\n          board: boardId\n        }, {\n          headers: {\n            Authorization: `Token ${this.token}`\n          }\n        })));\n        const updatedBoard = await axios.get(`http://localhost:8000/api/board/${boardId}/`, {\n          headers: {\n            Authorization: `Token ${this.token}`\n          }\n        });\n        this.board = updatedBoard.data;\n      } catch (error) {\n        console.error('Erro ao criar o board:', error);\n      }\n    },\n    // Mostrar formulário de card\n    showCardForm(columnId) {\n      this.cardFormColumnId = columnId;\n      this.newCard.title = '';\n      this.newCard.description = '';\n    },\n    // Cancelar criação de card\n    cancelCard() {\n      this.cardFormColumnId = null;\n      this.newCard.title = '';\n      this.newCard.description = '';\n    },\n    // Verificar visibilidade do formulário do card\n    isFormVisible(columnId) {\n      return this.cardFormColumnId === columnId;\n    },\n    // Enviar novo card\n    async submitCard(columnId) {\n      if (!this.token) return;\n      if (!this.newCard.title.trim()) return;\n      try {\n        await axios.post('http://localhost:8000/api/card/', {\n          title: this.newCard.title.trim(),\n          description: this.newCard.description.trim(),\n          order: 0,\n          column: columnId\n        }, {\n          headers: {\n            Authorization: `Token ${this.token}`\n          }\n        });\n\n        // Atualiza o board completo para garantir dados atualizados\n        const updatedBoard = await axios.get(`http://localhost:8000/api/board/${this.board.id}/`, {\n          headers: {\n            Authorization: `Token ${this.token}`\n          }\n        });\n        this.board = updatedBoard.data;\n        this.cancelCard();\n      } catch (error) {\n        console.error('Erro ao criar card:', error);\n      }\n    },\n    // Cor das colunas\n    getColumnColor(columnId) {\n      const colors = ['#03A9F4', '#21BA45', '#2185D0', '#6435C9', '#F2711C'];\n      return colors[columnId % colors.length];\n    }\n  }\n};","map":{"version":3,"names":["axios","name","data","authTab","isAuthenticated","token","user","loading","authError","registerSuccess","loginForm","username","password","registerForm","board","cardFormColumnId","newCard","title","description","created","localStorage","getItem","loadBoard","methods","login","res","post","id","user_id","setItem","error","response","non_field_errors","join","detail","register","Object","values","flat","logout","removeItem","get","headers","Authorization","status","createBoard","boardId","columnNames","Promise","all","map","index","order","updatedBoard","console","showCardForm","columnId","cancelCard","isFormVisible","submitCard","trim","column","getColumnColor","colors","length"],"sources":["C:/Users/faculdade/Desktop/Kanban/Kanban/kanban-frontend/src/KanbanBoard.js"],"sourcesContent":["import axios from 'axios'\r\n\r\nexport default {\r\n  name: 'KanbanApp',\r\n  data() {\r\n    return {\r\n      // Autenticação\r\n      authTab: 'login',\r\n      isAuthenticated: false,\r\n      token: null,\r\n      user: null,\r\n      loading: false,\r\n      authError: null,\r\n      registerSuccess: false,\r\n      loginForm: {\r\n        username: '',\r\n        password: '',\r\n      },\r\n      registerForm: {\r\n        username: '',\r\n        password: '',\r\n      },\r\n      // Dados do board e cards\r\n      board: null,\r\n      cardFormColumnId: null,\r\n      newCard: {\r\n        title: '',\r\n        description: '',\r\n      },\r\n    }\r\n  },\r\n  created() {\r\n    // Recupera token e carrega board se autenticado\r\n    this.token = localStorage.getItem('token')\r\n    if (this.token) {\r\n      this.isAuthenticated = true\r\n      this.loadBoard()\r\n    }\r\n  },\r\n  methods: {\r\n    // Login\r\n    async login() {\r\n      this.loading = true\r\n      this.authError = null\r\n      this.registerSuccess = false\r\n      try {\r\n        const res = await axios.post('http://localhost:8000/api/login/', this.loginForm)\r\n        this.token = res.data.token\r\n        this.user = { id: res.data.user_id, username: res.data.username }\r\n        localStorage.setItem('token', this.token)\r\n        this.isAuthenticated = true\r\n        this.loading = false\r\n        this.authTab = 'login'\r\n        this.loginForm.username = ''\r\n        this.loginForm.password = ''\r\n        await this.loadBoard()\r\n      } catch (error) {\r\n        if (error.response && error.response.data) {\r\n          const data = error.response.data\r\n          this.authError = data.non_field_errors ? data.non_field_errors.join(', ') : (data.detail || 'Erro ao fazer login')\r\n        } else {\r\n          this.authError = 'Erro na comunicação com o servidor'\r\n        }\r\n        this.loading = false\r\n      }\r\n    },\r\n\r\n    // Cadastro\r\n    async register() {\r\n      this.loading = true\r\n      this.authError = null\r\n      this.registerSuccess = false\r\n      try {\r\n        // Faz o registro\r\n        await axios.post('http://localhost:8000/api/register/', this.registerForm)\r\n    \r\n        // Após sucesso, faz login automático usando os dados cadastrados\r\n        this.loginForm.username = this.registerForm.username\r\n        this.loginForm.password = this.registerForm.password\r\n    \r\n        // Limpa o formulário de cadastro\r\n        this.registerForm.username = ''\r\n        this.registerForm.password = ''\r\n    \r\n        // Chama login automático\r\n        await this.login()\r\n    \r\n        this.loading = false\r\n      } catch (error) {\r\n        if (error.response && error.response.data) {\r\n          const data = error.response.data\r\n          if (typeof data === 'object') {\r\n            this.authError = Object.values(data).flat().join(', ')\r\n          } else {\r\n            this.authError = 'Erro ao registrar usuário'\r\n          }\r\n        } else {\r\n          this.authError = 'Erro na comunicação com o servidor'\r\n        }\r\n        this.loading = false\r\n      }\r\n    }\r\n,    \r\n\r\n    // Logout\r\n    logout() {\r\n      this.isAuthenticated = false\r\n      this.token = null\r\n      this.user = null\r\n      this.board = null\r\n      localStorage.removeItem('token')\r\n    },\r\n\r\n    // Carregar board\r\n    async loadBoard() {\r\n      if (!this.token) return\r\n      try {\r\n        const res = await axios.get('http://localhost:8000/api/board/', {\r\n          headers: { Authorization: `Token ${this.token}` },\r\n        })\r\n        this.board = res.data\r\n      } catch (error) {\r\n        if (error.response && error.response.status === 401) {\r\n          this.logout()\r\n        } else {\r\n          this.board = null\r\n        }\r\n      }\r\n    },\r\n\r\n    // Criar board\r\n    async createBoard() {\r\n      if (!this.token) return\r\n      try {\r\n        const res = await axios.post('http://localhost:8000/api/board/', \r\n          { name: 'Meu Novo Quadro' }, \r\n          { headers: { Authorization: `Token ${this.token}` } }\r\n        )\r\n        const boardId = res.data.id\r\n\r\n        const columnNames = ['A Fazer', 'Fazendo', 'Feito']\r\n        await Promise.all(\r\n          columnNames.map((name, index) =>\r\n            axios.post('http://localhost:8000/api/column/', {\r\n              name,\r\n              order: index,\r\n              board: boardId,\r\n            }, {\r\n              headers: { Authorization: `Token ${this.token}` }\r\n            })\r\n          )\r\n        )\r\n\r\n        const updatedBoard = await axios.get(`http://localhost:8000/api/board/${boardId}/`, {\r\n          headers: { Authorization: `Token ${this.token}` }\r\n        })\r\n        this.board = updatedBoard.data\r\n      } catch (error) {\r\n        console.error('Erro ao criar o board:', error)\r\n      }\r\n    },\r\n\r\n    // Mostrar formulário de card\r\n    showCardForm(columnId) {\r\n      this.cardFormColumnId = columnId\r\n      this.newCard.title = ''\r\n      this.newCard.description = ''\r\n    },\r\n\r\n    // Cancelar criação de card\r\n    cancelCard() {\r\n      this.cardFormColumnId = null\r\n      this.newCard.title = ''\r\n      this.newCard.description = ''\r\n    },\r\n\r\n    // Verificar visibilidade do formulário do card\r\n    isFormVisible(columnId) {\r\n      return this.cardFormColumnId === columnId\r\n    },\r\n\r\n    // Enviar novo card\r\n    async submitCard(columnId) {\r\n      if (!this.token) return\r\n      if (!this.newCard.title.trim()) return\r\n\r\n      try {\r\n        await axios.post('http://localhost:8000/api/card/', {\r\n          title: this.newCard.title.trim(),\r\n          description: this.newCard.description.trim(),\r\n          order: 0,\r\n          column: columnId,\r\n        }, {\r\n          headers: { Authorization: `Token ${this.token}` }\r\n        })\r\n\r\n        // Atualiza o board completo para garantir dados atualizados\r\n        const updatedBoard = await axios.get(`http://localhost:8000/api/board/${this.board.id}/`, {\r\n          headers: { Authorization: `Token ${this.token}` }\r\n        })\r\n        this.board = updatedBoard.data\r\n        this.cancelCard()\r\n      } catch (error) {\r\n        console.error('Erro ao criar card:', error)\r\n      }\r\n    },\r\n\r\n    // Cor das colunas\r\n    getColumnColor(columnId) {\r\n      const colors = ['#03A9F4', '#21BA45', '#2185D0', '#6435C9', '#F2711C']\r\n      return colors[columnId % colors.length]\r\n    },\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}