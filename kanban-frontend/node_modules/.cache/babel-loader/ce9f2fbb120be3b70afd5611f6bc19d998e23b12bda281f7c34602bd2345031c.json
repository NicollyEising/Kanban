{"ast":null,"code":"import axios from 'axios';\nexport default {\n  name: 'KanbanBoard',\n  data() {\n    return {\n      board: null\n    };\n  },\n  methods: {\n    async createBoard() {\n      try {\n        const boardRes = await axios.post('http://localhost:8000/api/board/', {\n          name: 'Meu Novo Quadro'\n        });\n        const boardId = boardRes.data.id;\n        const columnNames = ['A Fazer', 'Fazendo', 'Feito'];\n        await Promise.all(columnNames.map((name, index) => axios.post('http://localhost:8000/api/column/', {\n          name,\n          order: index,\n          board: boardId\n        })));\n        const updatedBoard = await axios.get(`http://localhost:8000/api/board/${boardId}/`);\n        this.board = updatedBoard.data;\n      } catch (error) {\n        console.error('Erro ao criar o board:', error);\n      }\n    },\n    async createCard(columnId) {\n      try {\n        await axios.post('http://localhost:8000/api/card/', {\n          title: 'Novo Card',\n          description: 'Descrição do card',\n          order: 0,\n          column: columnId\n        });\n        const updatedBoard = await axios.get(`http://localhost:8000/api/board/${this.board.id}/`);\n        this.board = updatedBoard.data;\n      } catch (error) {\n        console.error('Erro ao criar card:', error);\n      }\n    }\n  }\n};","map":{"version":3,"names":["axios","name","data","board","methods","createBoard","boardRes","post","boardId","id","columnNames","Promise","all","map","index","order","updatedBoard","get","error","console","createCard","columnId","title","description","column"],"sources":["C:\\Users\\faculdade\\Desktop\\Kanban\\Kanban\\kanban-frontend\\src\\KanbanBoard.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <button @click=\"createBoard\" class=\"create-button\">Criar Novo Board</button>\r\n\r\n    <div v-if=\"board\" class=\"kanban-board\">\r\n      <h1 class=\"board-title\">{{ board.name }}</h1>\r\n      <div class=\"columns\">\r\n        <div class=\"column\" v-for=\"column in board.columns\" :key=\"column.id\">\r\n          <h2 class=\"column-title\">{{ column.name }}</h2>\r\n          <button @click=\"createCard(column.id)\" class=\"create-card-button\">Criar Card</button>\r\n          <ul class=\"cards-list\">\r\n            <li class=\"card\" v-for=\"card in column.cards\" :key=\"card.id\">\r\n              <strong class=\"card-title\">{{ card.title }}</strong>\r\n              <p class=\"card-description\">{{ card.description }}</p>\r\n            </li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <div v-else class=\"loading\">Carregando...</div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from 'axios'\r\n\r\nexport default {\r\n  name: 'KanbanBoard',\r\n  data() {\r\n    return {\r\n      board: null,\r\n    }\r\n  },\r\n  methods: {\r\n    async createBoard() {\r\n      try {\r\n        const boardRes = await axios.post('http://localhost:8000/api/board/', {\r\n          name: 'Meu Novo Quadro',\r\n        })\r\n        const boardId = boardRes.data.id\r\n\r\n        const columnNames = ['A Fazer', 'Fazendo', 'Feito']\r\n        await Promise.all(\r\n          columnNames.map((name, index) =>\r\n            axios.post('http://localhost:8000/api/column/', {\r\n              name,\r\n              order: index,\r\n              board: boardId,\r\n            })\r\n          )\r\n        )\r\n\r\n        const updatedBoard = await axios.get(`http://localhost:8000/api/board/${boardId}/`)\r\n        this.board = updatedBoard.data\r\n      } catch (error) {\r\n        console.error('Erro ao criar o board:', error)\r\n      }\r\n    },\r\n    async createCard(columnId) {\r\n      try {\r\n        await axios.post('http://localhost:8000/api/card/', {\r\n          title: 'Novo Card',\r\n          description: 'Descrição do card',\r\n          order: 0,\r\n          column: columnId,\r\n        })\r\n        const updatedBoard = await axios.get(`http://localhost:8000/api/board/${this.board.id}/`)\r\n        this.board = updatedBoard.data\r\n      } catch (error) {\r\n        console.error('Erro ao criar card:', error)\r\n      }\r\n    },\r\n  },\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.create-button {\r\n  margin: 16px auto;\r\n  display: block;\r\n  padding: 10px 20px;\r\n  background-color: #2980b9;\r\n  color: white;\r\n  border: none;\r\n  border-radius: 6px;\r\n  cursor: pointer;\r\n  font-size: 1rem;\r\n}\r\n.create-button:hover {\r\n  background-color: #1c6fa0;\r\n}\r\n\r\n.create-card-button {\r\n  margin-bottom: 12px;\r\n  padding: 6px 12px;\r\n  background-color: #27ae60;\r\n  color: white;\r\n  border: none;\r\n  border-radius: 4px;\r\n  cursor: pointer;\r\n  font-size: 0.9rem;\r\n}\r\n.create-card-button:hover {\r\n  background-color: #1e8449;\r\n}\r\n\r\n.kanban-board {\r\n  max-width: 1000px;\r\n  margin: 0 auto;\r\n  font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\r\n  color: #333;\r\n}\r\n\r\n.board-title {\r\n  text-align: center;\r\n  margin-bottom: 24px;\r\n  font-size: 2rem;\r\n  font-weight: 700;\r\n  color: #2c3e50;\r\n}\r\n\r\n.columns {\r\n  display: flex;\r\n  gap: 24px;\r\n  overflow-x: auto;\r\n  padding-bottom: 16px;\r\n}\r\n\r\n.column {\r\n  background-color: #ffffff;\r\n  border-radius: 8px;\r\n  box-shadow: 0 2px 6px rgb(0 0 0 / 0.1);\r\n  padding: 16px;\r\n  min-width: 280px;\r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n\r\n.column-title {\r\n  font-size: 1.25rem;\r\n  margin-bottom: 16px;\r\n  color: #34495e;\r\n  border-bottom: 2px solid #2980b9;\r\n  padding-bottom: 8px;\r\n}\r\n\r\n.cards-list {\r\n  list-style: none;\r\n  padding: 0;\r\n  margin: 0;\r\n  flex-grow: 1;\r\n  overflow-y: auto;\r\n}\r\n\r\n.card {\r\n  background-color: #ecf0f1;\r\n  border-radius: 6px;\r\n  padding: 12px 16px;\r\n  margin-bottom: 12px;\r\n  box-shadow: 0 1px 3px rgb(0 0 0 / 0.1);\r\n  transition: background-color 0.2s ease;\r\n}\r\n\r\n.card:hover {\r\n  background-color: #d0e6f7;\r\n}\r\n\r\n.card-title {\r\n  display: block;\r\n  font-weight: 600;\r\n  margin-bottom: 6px;\r\n  color: #2c3e50;\r\n}\r\n\r\n.card-description {\r\n  font-size: 0.9rem;\r\n  color: #555;\r\n  margin: 0;\r\n}\r\n\r\n.loading {\r\n  font-size: 1.2rem;\r\n  color: #666;\r\n  text-align: center;\r\n  padding: 40px 0;\r\n}\r\n</style>\r\n"],"mappings":"AAyBA,OAAOA,KAAI,MAAO,OAAM;AAExB,eAAe;EACbC,IAAI,EAAE,aAAa;EACnBC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,KAAK,EAAE;IACT;EACF,CAAC;EACDC,OAAO,EAAE;IACP,MAAMC,WAAWA,CAAA,EAAG;MAClB,IAAI;QACF,MAAMC,QAAO,GAAI,MAAMN,KAAK,CAACO,IAAI,CAAC,kCAAkC,EAAE;UACpEN,IAAI,EAAE;QACR,CAAC;QACD,MAAMO,OAAM,GAAIF,QAAQ,CAACJ,IAAI,CAACO,EAAC;QAE/B,MAAMC,WAAU,GAAI,CAAC,SAAS,EAAE,SAAS,EAAE,OAAO;QAClD,MAAMC,OAAO,CAACC,GAAG,CACfF,WAAW,CAACG,GAAG,CAAC,CAACZ,IAAI,EAAEa,KAAK,KAC1Bd,KAAK,CAACO,IAAI,CAAC,mCAAmC,EAAE;UAC9CN,IAAI;UACJc,KAAK,EAAED,KAAK;UACZX,KAAK,EAAEK;QACT,CAAC,CACH,CACF;QAEA,MAAMQ,YAAW,GAAI,MAAMhB,KAAK,CAACiB,GAAG,CAAC,mCAAmCT,OAAO,GAAG;QAClF,IAAI,CAACL,KAAI,GAAIa,YAAY,CAACd,IAAG;MAC/B,EAAE,OAAOgB,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK;MAC/C;IACF,CAAC;IACD,MAAME,UAAUA,CAACC,QAAQ,EAAE;MACzB,IAAI;QACF,MAAMrB,KAAK,CAACO,IAAI,CAAC,iCAAiC,EAAE;UAClDe,KAAK,EAAE,WAAW;UAClBC,WAAW,EAAE,mBAAmB;UAChCR,KAAK,EAAE,CAAC;UACRS,MAAM,EAAEH;QACV,CAAC;QACD,MAAML,YAAW,GAAI,MAAMhB,KAAK,CAACiB,GAAG,CAAC,mCAAmC,IAAI,CAACd,KAAK,CAACM,EAAE,GAAG;QACxF,IAAI,CAACN,KAAI,GAAIa,YAAY,CAACd,IAAG;MAC/B,EAAE,OAAOgB,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,qBAAqB,EAAEA,KAAK;MAC5C;IACF;EACF;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}